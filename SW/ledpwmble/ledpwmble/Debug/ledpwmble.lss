
ledpwmble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000114c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  0000114c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  2000000c  00001158  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000058  000011a4  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016778  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cd8  00000000  00000000  00036805  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001004  00000000  00000000  000384dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000370  00000000  00000000  000394e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002c0  00000000  00000000  00039851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000173d3  00000000  00000000  00039b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000071ce  00000000  00000000  00050ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008667f  00000000  00000000  000580b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a38  00000000  00000000  000de734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 20 00 20 a5 0b 00 00 9d 0c 00 00 9d 0c 00 00     X . ............
	...
      2c:	9d 0c 00 00 00 00 00 00 00 00 00 00 9d 0c 00 00     ................
      3c:	9d 0c 00 00 9d 0c 00 00 9d 0c 00 00 9d 0c 00 00     ................
      4c:	9d 0c 00 00 9d 0c 00 00 9d 0c 00 00 9d 0c 00 00     ................
      5c:	9d 0c 00 00 9d 0c 00 00 9d 0c 00 00 9d 0c 00 00     ................
      6c:	9d 0c 00 00 9d 0c 00 00 9d 0c 00 00 9d 0c 00 00     ................
      7c:	ed 0a 00 00 01 0b 00 00 15 0b 00 00 85 0f 00 00     ................
      8c:	9d 0c 00 00 9d 0c 00 00 00 00 00 00 00 00 00 00     ................
      9c:	9d 0c 00 00 9d 0c 00 00 9d 0c 00 00 9d 0c 00 00     ................
      ac:	9d 0c 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	0000114c 	.word	0x0000114c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	0000114c 	.word	0x0000114c
     10c:	0000114c 	.word	0x0000114c
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
	...

00000120 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     126:	4b10      	ldr	r3, [pc, #64]	; (168 <cpu_irq_enter_critical+0x48>)
     128:	681b      	ldr	r3, [r3, #0]
     12a:	2b00      	cmp	r3, #0
     12c:	d112      	bne.n	154 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     12e:	f3ef 8310 	mrs	r3, PRIMASK
     132:	607b      	str	r3, [r7, #4]
  return(result);
     134:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     136:	2b00      	cmp	r3, #0
     138:	d109      	bne.n	14e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     13a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     13c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     140:	4b0a      	ldr	r3, [pc, #40]	; (16c <cpu_irq_enter_critical+0x4c>)
     142:	2200      	movs	r2, #0
     144:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     146:	4b0a      	ldr	r3, [pc, #40]	; (170 <cpu_irq_enter_critical+0x50>)
     148:	2201      	movs	r2, #1
     14a:	701a      	strb	r2, [r3, #0]
     14c:	e002      	b.n	154 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <cpu_irq_enter_critical+0x50>)
     150:	2200      	movs	r2, #0
     152:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     154:	4b04      	ldr	r3, [pc, #16]	; (168 <cpu_irq_enter_critical+0x48>)
     156:	681b      	ldr	r3, [r3, #0]
     158:	1c5a      	adds	r2, r3, #1
     15a:	4b03      	ldr	r3, [pc, #12]	; (168 <cpu_irq_enter_critical+0x48>)
     15c:	601a      	str	r2, [r3, #0]
}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	46bd      	mov	sp, r7
     162:	b002      	add	sp, #8
     164:	bd80      	pop	{r7, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	20000028 	.word	0x20000028
     16c:	20000000 	.word	0x20000000
     170:	2000002c 	.word	0x2000002c

00000174 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     174:	b580      	push	{r7, lr}
     176:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     178:	4b0b      	ldr	r3, [pc, #44]	; (1a8 <cpu_irq_leave_critical+0x34>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	1e5a      	subs	r2, r3, #1
     17e:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <cpu_irq_leave_critical+0x34>)
     180:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     182:	4b09      	ldr	r3, [pc, #36]	; (1a8 <cpu_irq_leave_critical+0x34>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d10a      	bne.n	1a0 <cpu_irq_leave_critical+0x2c>
     18a:	4b08      	ldr	r3, [pc, #32]	; (1ac <cpu_irq_leave_critical+0x38>)
     18c:	781b      	ldrb	r3, [r3, #0]
     18e:	b2db      	uxtb	r3, r3
     190:	2b00      	cmp	r3, #0
     192:	d005      	beq.n	1a0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     194:	4b06      	ldr	r3, [pc, #24]	; (1b0 <cpu_irq_leave_critical+0x3c>)
     196:	2201      	movs	r2, #1
     198:	701a      	strb	r2, [r3, #0]
     19a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     19e:	b662      	cpsie	i
	}
}
     1a0:	46c0      	nop			; (mov r8, r8)
     1a2:	46bd      	mov	sp, r7
     1a4:	bd80      	pop	{r7, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	20000028 	.word	0x20000028
     1ac:	2000002c 	.word	0x2000002c
     1b0:	20000000 	.word	0x20000000

000001b4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	b082      	sub	sp, #8
     1b8:	af00      	add	r7, sp, #0
     1ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2280      	movs	r2, #128	; 0x80
     1c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1c8:	687b      	ldr	r3, [r7, #4]
     1ca:	2201      	movs	r2, #1
     1cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1ce:	687b      	ldr	r3, [r7, #4]
     1d0:	2200      	movs	r2, #0
     1d2:	70da      	strb	r2, [r3, #3]
}
     1d4:	46c0      	nop			; (mov r8, r8)
     1d6:	46bd      	mov	sp, r7
     1d8:	b002      	add	sp, #8
     1da:	bd80      	pop	{r7, pc}

000001dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1dc:	b580      	push	{r7, lr}
     1de:	b084      	sub	sp, #16
     1e0:	af00      	add	r7, sp, #0
     1e2:	0002      	movs	r2, r0
     1e4:	6039      	str	r1, [r7, #0]
     1e6:	1dfb      	adds	r3, r7, #7
     1e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     1ea:	230c      	movs	r3, #12
     1ec:	18fb      	adds	r3, r7, r3
     1ee:	0018      	movs	r0, r3
     1f0:	4b10      	ldr	r3, [pc, #64]	; (234 <port_pin_set_config+0x58>)
     1f2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     1f4:	230c      	movs	r3, #12
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	2280      	movs	r2, #128	; 0x80
     1fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1fc:	683b      	ldr	r3, [r7, #0]
     1fe:	781a      	ldrb	r2, [r3, #0]
     200:	230c      	movs	r3, #12
     202:	18fb      	adds	r3, r7, r3
     204:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     206:	683b      	ldr	r3, [r7, #0]
     208:	785a      	ldrb	r2, [r3, #1]
     20a:	230c      	movs	r3, #12
     20c:	18fb      	adds	r3, r7, r3
     20e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     210:	683b      	ldr	r3, [r7, #0]
     212:	789a      	ldrb	r2, [r3, #2]
     214:	230c      	movs	r3, #12
     216:	18fb      	adds	r3, r7, r3
     218:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     21a:	230c      	movs	r3, #12
     21c:	18fa      	adds	r2, r7, r3
     21e:	1dfb      	adds	r3, r7, #7
     220:	781b      	ldrb	r3, [r3, #0]
     222:	0011      	movs	r1, r2
     224:	0018      	movs	r0, r3
     226:	4b04      	ldr	r3, [pc, #16]	; (238 <port_pin_set_config+0x5c>)
     228:	4798      	blx	r3
}
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	46bd      	mov	sp, r7
     22e:	b004      	add	sp, #16
     230:	bd80      	pop	{r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	000001b5 	.word	0x000001b5
     238:	00000a65 	.word	0x00000a65

0000023c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     244:	687b      	ldr	r3, [r7, #4]
     246:	2201      	movs	r2, #1
     248:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     24a:	687b      	ldr	r3, [r7, #4]
     24c:	2200      	movs	r2, #0
     24e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     250:	687b      	ldr	r3, [r7, #4]
     252:	2206      	movs	r2, #6
     254:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
     256:	687b      	ldr	r3, [r7, #4]
     258:	2200      	movs	r2, #0
     25a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2200      	movs	r2, #0
     260:	725a      	strb	r2, [r3, #9]
}
     262:	46c0      	nop			; (mov r8, r8)
     264:	46bd      	mov	sp, r7
     266:	b002      	add	sp, #8
     268:	bd80      	pop	{r7, pc}

0000026a <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
     26a:	b580      	push	{r7, lr}
     26c:	b082      	sub	sp, #8
     26e:	af00      	add	r7, sp, #0
     270:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
     272:	687b      	ldr	r3, [r7, #4]
     274:	2203      	movs	r2, #3
     276:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
     278:	687b      	ldr	r3, [r7, #4]
     27a:	2200      	movs	r2, #0
     27c:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2201      	movs	r2, #1
     282:	709a      	strb	r2, [r3, #2]
}
     284:	46c0      	nop			; (mov r8, r8)
     286:	46bd      	mov	sp, r7
     288:	b002      	add	sp, #8
     28a:	bd80      	pop	{r7, pc}

0000028c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
     28c:	b580      	push	{r7, lr}
     28e:	b082      	sub	sp, #8
     290:	af00      	add	r7, sp, #0
     292:	0002      	movs	r2, r0
     294:	1dfb      	adds	r3, r7, #7
     296:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     298:	4a03      	ldr	r2, [pc, #12]	; (2a8 <system_cpu_clock_set_divider+0x1c>)
     29a:	1dfb      	adds	r3, r7, #7
     29c:	781b      	ldrb	r3, [r3, #0]
     29e:	7213      	strb	r3, [r2, #8]
}
     2a0:	46c0      	nop			; (mov r8, r8)
     2a2:	46bd      	mov	sp, r7
     2a4:	b002      	add	sp, #8
     2a6:	bd80      	pop	{r7, pc}
     2a8:	40000400 	.word	0x40000400

000002ac <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	af00      	add	r7, sp, #0
     2b2:	0002      	movs	r2, r0
     2b4:	1dfb      	adds	r3, r7, #7
     2b6:	701a      	strb	r2, [r3, #0]
     2b8:	1dbb      	adds	r3, r7, #6
     2ba:	1c0a      	adds	r2, r1, #0
     2bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     2be:	1dfb      	adds	r3, r7, #7
     2c0:	781b      	ldrb	r3, [r3, #0]
     2c2:	2b01      	cmp	r3, #1
     2c4:	d008      	beq.n	2d8 <system_apb_clock_set_divider+0x2c>
     2c6:	2b02      	cmp	r3, #2
     2c8:	d00b      	beq.n	2e2 <system_apb_clock_set_divider+0x36>
     2ca:	2b00      	cmp	r3, #0
     2cc:	d10e      	bne.n	2ec <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     2ce:	4a0b      	ldr	r2, [pc, #44]	; (2fc <system_apb_clock_set_divider+0x50>)
     2d0:	1dbb      	adds	r3, r7, #6
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	7253      	strb	r3, [r2, #9]
			break;
     2d6:	e00b      	b.n	2f0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     2d8:	4a08      	ldr	r2, [pc, #32]	; (2fc <system_apb_clock_set_divider+0x50>)
     2da:	1dbb      	adds	r3, r7, #6
     2dc:	781b      	ldrb	r3, [r3, #0]
     2de:	7293      	strb	r3, [r2, #10]
			break;
     2e0:	e006      	b.n	2f0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     2e2:	4a06      	ldr	r2, [pc, #24]	; (2fc <system_apb_clock_set_divider+0x50>)
     2e4:	1dbb      	adds	r3, r7, #6
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	72d3      	strb	r3, [r2, #11]
			break;
     2ea:	e001      	b.n	2f0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     2ec:	2317      	movs	r3, #23
     2ee:	e000      	b.n	2f2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
     2f0:	2300      	movs	r3, #0
}
     2f2:	0018      	movs	r0, r3
     2f4:	46bd      	mov	sp, r7
     2f6:	b002      	add	sp, #8
     2f8:	bd80      	pop	{r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	40000400 	.word	0x40000400

00000300 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
     300:	b580      	push	{r7, lr}
     302:	b082      	sub	sp, #8
     304:	af00      	add	r7, sp, #0
     306:	0002      	movs	r2, r0
     308:	1dfb      	adds	r3, r7, #7
     30a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     30c:	4a08      	ldr	r2, [pc, #32]	; (330 <system_flash_set_waitstates+0x30>)
     30e:	1dfb      	adds	r3, r7, #7
     310:	781b      	ldrb	r3, [r3, #0]
     312:	210f      	movs	r1, #15
     314:	400b      	ands	r3, r1
     316:	b2d9      	uxtb	r1, r3
     318:	6853      	ldr	r3, [r2, #4]
     31a:	200f      	movs	r0, #15
     31c:	4001      	ands	r1, r0
     31e:	0049      	lsls	r1, r1, #1
     320:	201e      	movs	r0, #30
     322:	4383      	bics	r3, r0
     324:	430b      	orrs	r3, r1
     326:	6053      	str	r3, [r2, #4]
}
     328:	46c0      	nop			; (mov r8, r8)
     32a:	46bd      	mov	sp, r7
     32c:	b002      	add	sp, #8
     32e:	bd80      	pop	{r7, pc}
     330:	41004000 	.word	0x41004000

00000334 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
     334:	b580      	push	{r7, lr}
     336:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     338:	46c0      	nop			; (mov r8, r8)
     33a:	4b04      	ldr	r3, [pc, #16]	; (34c <_system_dfll_wait_for_sync+0x18>)
     33c:	68db      	ldr	r3, [r3, #12]
     33e:	2210      	movs	r2, #16
     340:	4013      	ands	r3, r2
     342:	d0fa      	beq.n	33a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
     344:	46c0      	nop			; (mov r8, r8)
     346:	46bd      	mov	sp, r7
     348:	bd80      	pop	{r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40000800 	.word	0x40000800

00000350 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
     350:	b580      	push	{r7, lr}
     352:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     354:	4b0c      	ldr	r3, [pc, #48]	; (388 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     356:	2202      	movs	r2, #2
     358:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     35a:	4b0c      	ldr	r3, [pc, #48]	; (38c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     35c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     35e:	4a0a      	ldr	r2, [pc, #40]	; (388 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     360:	4b0b      	ldr	r3, [pc, #44]	; (390 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     362:	689b      	ldr	r3, [r3, #8]
     364:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     366:	4a08      	ldr	r2, [pc, #32]	; (388 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     368:	4b09      	ldr	r3, [pc, #36]	; (390 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     36a:	685b      	ldr	r3, [r3, #4]
     36c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     370:	2200      	movs	r2, #0
     372:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
     376:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     378:	4a03      	ldr	r2, [pc, #12]	; (388 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
     37a:	4b05      	ldr	r3, [pc, #20]	; (390 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	b29b      	uxth	r3, r3
     380:	8493      	strh	r3, [r2, #36]	; 0x24
}
     382:	46c0      	nop			; (mov r8, r8)
     384:	46bd      	mov	sp, r7
     386:	bd80      	pop	{r7, pc}
     388:	40000800 	.word	0x40000800
     38c:	00000335 	.word	0x00000335
     390:	20000030 	.word	0x20000030

00000394 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     394:	b580      	push	{r7, lr}
     396:	b084      	sub	sp, #16
     398:	af00      	add	r7, sp, #0
     39a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     39c:	4b1a      	ldr	r3, [pc, #104]	; (408 <system_clock_source_osc8m_set_config+0x74>)
     39e:	6a1b      	ldr	r3, [r3, #32]
     3a0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     3a2:	687b      	ldr	r3, [r7, #4]
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	1c1a      	adds	r2, r3, #0
     3a8:	2303      	movs	r3, #3
     3aa:	4013      	ands	r3, r2
     3ac:	b2da      	uxtb	r2, r3
     3ae:	230d      	movs	r3, #13
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	2103      	movs	r1, #3
     3b4:	400a      	ands	r2, r1
     3b6:	0010      	movs	r0, r2
     3b8:	781a      	ldrb	r2, [r3, #0]
     3ba:	2103      	movs	r1, #3
     3bc:	438a      	bics	r2, r1
     3be:	1c11      	adds	r1, r2, #0
     3c0:	1c02      	adds	r2, r0, #0
     3c2:	430a      	orrs	r2, r1
     3c4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
     3c6:	687b      	ldr	r3, [r7, #4]
     3c8:	789a      	ldrb	r2, [r3, #2]
     3ca:	230c      	movs	r3, #12
     3cc:	18fb      	adds	r3, r7, r3
     3ce:	01d0      	lsls	r0, r2, #7
     3d0:	781a      	ldrb	r2, [r3, #0]
     3d2:	217f      	movs	r1, #127	; 0x7f
     3d4:	400a      	ands	r2, r1
     3d6:	1c11      	adds	r1, r2, #0
     3d8:	1c02      	adds	r2, r0, #0
     3da:	430a      	orrs	r2, r1
     3dc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	785a      	ldrb	r2, [r3, #1]
     3e2:	230c      	movs	r3, #12
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	2101      	movs	r1, #1
     3e8:	400a      	ands	r2, r1
     3ea:	0190      	lsls	r0, r2, #6
     3ec:	781a      	ldrb	r2, [r3, #0]
     3ee:	2140      	movs	r1, #64	; 0x40
     3f0:	438a      	bics	r2, r1
     3f2:	1c11      	adds	r1, r2, #0
     3f4:	1c02      	adds	r2, r0, #0
     3f6:	430a      	orrs	r2, r1
     3f8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
     3fa:	4b03      	ldr	r3, [pc, #12]	; (408 <system_clock_source_osc8m_set_config+0x74>)
     3fc:	68fa      	ldr	r2, [r7, #12]
     3fe:	621a      	str	r2, [r3, #32]
}
     400:	46c0      	nop			; (mov r8, r8)
     402:	46bd      	mov	sp, r7
     404:	b004      	add	sp, #16
     406:	bd80      	pop	{r7, pc}
     408:	40000800 	.word	0x40000800

0000040c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
     40c:	b580      	push	{r7, lr}
     40e:	b082      	sub	sp, #8
     410:	af00      	add	r7, sp, #0
     412:	0002      	movs	r2, r0
     414:	1dfb      	adds	r3, r7, #7
     416:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
     418:	1dfb      	adds	r3, r7, #7
     41a:	781b      	ldrb	r3, [r3, #0]
     41c:	2b08      	cmp	r3, #8
     41e:	d83b      	bhi.n	498 <system_clock_source_enable+0x8c>
     420:	009a      	lsls	r2, r3, #2
     422:	4b21      	ldr	r3, [pc, #132]	; (4a8 <system_clock_source_enable+0x9c>)
     424:	18d3      	adds	r3, r2, r3
     426:	681b      	ldr	r3, [r3, #0]
     428:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     42a:	4b20      	ldr	r3, [pc, #128]	; (4ac <system_clock_source_enable+0xa0>)
     42c:	4a1f      	ldr	r2, [pc, #124]	; (4ac <system_clock_source_enable+0xa0>)
     42e:	6a12      	ldr	r2, [r2, #32]
     430:	2102      	movs	r1, #2
     432:	430a      	orrs	r2, r1
     434:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     436:	2300      	movs	r3, #0
     438:	e031      	b.n	49e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     43a:	4b1c      	ldr	r3, [pc, #112]	; (4ac <system_clock_source_enable+0xa0>)
     43c:	4a1b      	ldr	r2, [pc, #108]	; (4ac <system_clock_source_enable+0xa0>)
     43e:	6992      	ldr	r2, [r2, #24]
     440:	2102      	movs	r1, #2
     442:	430a      	orrs	r2, r1
     444:	619a      	str	r2, [r3, #24]
		break;
     446:	e029      	b.n	49c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     448:	4a18      	ldr	r2, [pc, #96]	; (4ac <system_clock_source_enable+0xa0>)
     44a:	4b18      	ldr	r3, [pc, #96]	; (4ac <system_clock_source_enable+0xa0>)
     44c:	8a1b      	ldrh	r3, [r3, #16]
     44e:	b29b      	uxth	r3, r3
     450:	2102      	movs	r1, #2
     452:	430b      	orrs	r3, r1
     454:	b29b      	uxth	r3, r3
     456:	8213      	strh	r3, [r2, #16]
		break;
     458:	e020      	b.n	49c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     45a:	4a14      	ldr	r2, [pc, #80]	; (4ac <system_clock_source_enable+0xa0>)
     45c:	4b13      	ldr	r3, [pc, #76]	; (4ac <system_clock_source_enable+0xa0>)
     45e:	8a9b      	ldrh	r3, [r3, #20]
     460:	b29b      	uxth	r3, r3
     462:	2102      	movs	r1, #2
     464:	430b      	orrs	r3, r1
     466:	b29b      	uxth	r3, r3
     468:	8293      	strh	r3, [r2, #20]
		break;
     46a:	e017      	b.n	49c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     46c:	4b10      	ldr	r3, [pc, #64]	; (4b0 <system_clock_source_enable+0xa4>)
     46e:	681b      	ldr	r3, [r3, #0]
     470:	2202      	movs	r2, #2
     472:	431a      	orrs	r2, r3
     474:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <system_clock_source_enable+0xa4>)
     476:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
     478:	4b0e      	ldr	r3, [pc, #56]	; (4b4 <system_clock_source_enable+0xa8>)
     47a:	4798      	blx	r3
		break;
     47c:	e00e      	b.n	49c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     47e:	4a0b      	ldr	r2, [pc, #44]	; (4ac <system_clock_source_enable+0xa0>)
     480:	490a      	ldr	r1, [pc, #40]	; (4ac <system_clock_source_enable+0xa0>)
     482:	2344      	movs	r3, #68	; 0x44
     484:	5ccb      	ldrb	r3, [r1, r3]
     486:	b2db      	uxtb	r3, r3
     488:	2102      	movs	r1, #2
     48a:	430b      	orrs	r3, r1
     48c:	b2d9      	uxtb	r1, r3
     48e:	2344      	movs	r3, #68	; 0x44
     490:	54d1      	strb	r1, [r2, r3]
		break;
     492:	e003      	b.n	49c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     494:	2300      	movs	r3, #0
     496:	e002      	b.n	49e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     498:	2317      	movs	r3, #23
     49a:	e000      	b.n	49e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
     49c:	2300      	movs	r3, #0
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b002      	add	sp, #8
     4a4:	bd80      	pop	{r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	000010d8 	.word	0x000010d8
     4ac:	40000800 	.word	0x40000800
     4b0:	20000030 	.word	0x20000030
     4b4:	00000351 	.word	0x00000351

000004b8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     4be:	003b      	movs	r3, r7
     4c0:	2201      	movs	r2, #1
     4c2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     4c4:	2300      	movs	r3, #0
     4c6:	607b      	str	r3, [r7, #4]
     4c8:	e009      	b.n	4de <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	b2db      	uxtb	r3, r3
     4ce:	003a      	movs	r2, r7
     4d0:	0011      	movs	r1, r2
     4d2:	0018      	movs	r0, r3
     4d4:	4b05      	ldr	r3, [pc, #20]	; (4ec <_switch_peripheral_gclk+0x34>)
     4d6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	3301      	adds	r3, #1
     4dc:	607b      	str	r3, [r7, #4]
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	2b24      	cmp	r3, #36	; 0x24
     4e2:	d9f2      	bls.n	4ca <_switch_peripheral_gclk+0x12>
	}
}
     4e4:	46c0      	nop			; (mov r8, r8)
     4e6:	46bd      	mov	sp, r7
     4e8:	b002      	add	sp, #8
     4ea:	bd80      	pop	{r7, pc}
     4ec:	00000819 	.word	0x00000819

000004f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     4f0:	b580      	push	{r7, lr}
     4f2:	b0a0      	sub	sp, #128	; 0x80
     4f4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     4f6:	4b27      	ldr	r3, [pc, #156]	; (594 <system_clock_init+0xa4>)
     4f8:	22c2      	movs	r2, #194	; 0xc2
     4fa:	00d2      	lsls	r2, r2, #3
     4fc:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
     4fe:	2000      	movs	r0, #0
     500:	4b25      	ldr	r3, [pc, #148]	; (598 <system_clock_init+0xa8>)
     502:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
     504:	4b25      	ldr	r3, [pc, #148]	; (59c <system_clock_init+0xac>)
     506:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
     508:	237c      	movs	r3, #124	; 0x7c
     50a:	18fb      	adds	r3, r7, r3
     50c:	0018      	movs	r0, r3
     50e:	4b24      	ldr	r3, [pc, #144]	; (5a0 <system_clock_init+0xb0>)
     510:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     512:	237c      	movs	r3, #124	; 0x7c
     514:	18fb      	adds	r3, r7, r3
     516:	2200      	movs	r2, #0
     518:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
     51a:	237c      	movs	r3, #124	; 0x7c
     51c:	18fb      	adds	r3, r7, r3
     51e:	2201      	movs	r2, #1
     520:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
     522:	237c      	movs	r3, #124	; 0x7c
     524:	18fb      	adds	r3, r7, r3
     526:	2200      	movs	r2, #0
     528:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
     52a:	237c      	movs	r3, #124	; 0x7c
     52c:	18fb      	adds	r3, r7, r3
     52e:	0018      	movs	r0, r3
     530:	4b1c      	ldr	r3, [pc, #112]	; (5a4 <system_clock_init+0xb4>)
     532:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     534:	2006      	movs	r0, #6
     536:	4b1c      	ldr	r3, [pc, #112]	; (5a8 <system_clock_init+0xb8>)
     538:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     53a:	4b1c      	ldr	r3, [pc, #112]	; (5ac <system_clock_init+0xbc>)
     53c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
     53e:	2000      	movs	r0, #0
     540:	4b1b      	ldr	r3, [pc, #108]	; (5b0 <system_clock_init+0xc0>)
     542:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
     544:	2100      	movs	r1, #0
     546:	2000      	movs	r0, #0
     548:	4b1a      	ldr	r3, [pc, #104]	; (5b4 <system_clock_init+0xc4>)
     54a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
     54c:	2100      	movs	r1, #0
     54e:	2001      	movs	r0, #1
     550:	4b18      	ldr	r3, [pc, #96]	; (5b4 <system_clock_init+0xc4>)
     552:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
     554:	2100      	movs	r1, #0
     556:	2002      	movs	r0, #2
     558:	4b16      	ldr	r3, [pc, #88]	; (5b4 <system_clock_init+0xc4>)
     55a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     55c:	1d3b      	adds	r3, r7, #4
     55e:	0018      	movs	r0, r3
     560:	4b15      	ldr	r3, [pc, #84]	; (5b8 <system_clock_init+0xc8>)
     562:	4798      	blx	r3
     564:	1d3b      	adds	r3, r7, #4
     566:	2206      	movs	r2, #6
     568:	701a      	strb	r2, [r3, #0]
     56a:	1d3b      	adds	r3, r7, #4
     56c:	2201      	movs	r2, #1
     56e:	605a      	str	r2, [r3, #4]
     570:	1d3b      	adds	r3, r7, #4
     572:	2200      	movs	r2, #0
     574:	721a      	strb	r2, [r3, #8]
     576:	1d3b      	adds	r3, r7, #4
     578:	2200      	movs	r2, #0
     57a:	725a      	strb	r2, [r3, #9]
     57c:	1d3b      	adds	r3, r7, #4
     57e:	0019      	movs	r1, r3
     580:	2000      	movs	r0, #0
     582:	4b0e      	ldr	r3, [pc, #56]	; (5bc <system_clock_init+0xcc>)
     584:	4798      	blx	r3
     586:	2000      	movs	r0, #0
     588:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <system_clock_init+0xd0>)
     58a:	4798      	blx	r3
#endif
}
     58c:	46c0      	nop			; (mov r8, r8)
     58e:	46bd      	mov	sp, r7
     590:	b020      	add	sp, #128	; 0x80
     592:	bd80      	pop	{r7, pc}
     594:	40000800 	.word	0x40000800
     598:	00000301 	.word	0x00000301
     59c:	000004b9 	.word	0x000004b9
     5a0:	0000026b 	.word	0x0000026b
     5a4:	00000395 	.word	0x00000395
     5a8:	0000040d 	.word	0x0000040d
     5ac:	00000669 	.word	0x00000669
     5b0:	0000028d 	.word	0x0000028d
     5b4:	000002ad 	.word	0x000002ad
     5b8:	0000023d 	.word	0x0000023d
     5bc:	00000699 	.word	0x00000699
     5c0:	000007bd 	.word	0x000007bd

000005c4 <system_apb_clock_set_mask>:
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	0002      	movs	r2, r0
     5cc:	6039      	str	r1, [r7, #0]
     5ce:	1dfb      	adds	r3, r7, #7
     5d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2b01      	cmp	r3, #1
     5d8:	d00a      	beq.n	5f0 <system_apb_clock_set_mask+0x2c>
     5da:	2b02      	cmp	r3, #2
     5dc:	d00f      	beq.n	5fe <system_apb_clock_set_mask+0x3a>
     5de:	2b00      	cmp	r3, #0
     5e0:	d114      	bne.n	60c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     5e2:	4b0e      	ldr	r3, [pc, #56]	; (61c <system_apb_clock_set_mask+0x58>)
     5e4:	4a0d      	ldr	r2, [pc, #52]	; (61c <system_apb_clock_set_mask+0x58>)
     5e6:	6991      	ldr	r1, [r2, #24]
     5e8:	683a      	ldr	r2, [r7, #0]
     5ea:	430a      	orrs	r2, r1
     5ec:	619a      	str	r2, [r3, #24]
			break;
     5ee:	e00f      	b.n	610 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     5f0:	4b0a      	ldr	r3, [pc, #40]	; (61c <system_apb_clock_set_mask+0x58>)
     5f2:	4a0a      	ldr	r2, [pc, #40]	; (61c <system_apb_clock_set_mask+0x58>)
     5f4:	69d1      	ldr	r1, [r2, #28]
     5f6:	683a      	ldr	r2, [r7, #0]
     5f8:	430a      	orrs	r2, r1
     5fa:	61da      	str	r2, [r3, #28]
			break;
     5fc:	e008      	b.n	610 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     5fe:	4b07      	ldr	r3, [pc, #28]	; (61c <system_apb_clock_set_mask+0x58>)
     600:	4a06      	ldr	r2, [pc, #24]	; (61c <system_apb_clock_set_mask+0x58>)
     602:	6a11      	ldr	r1, [r2, #32]
     604:	683a      	ldr	r2, [r7, #0]
     606:	430a      	orrs	r2, r1
     608:	621a      	str	r2, [r3, #32]
			break;
     60a:	e001      	b.n	610 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     60c:	2317      	movs	r3, #23
     60e:	e000      	b.n	612 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     610:	2300      	movs	r3, #0
}
     612:	0018      	movs	r0, r3
     614:	46bd      	mov	sp, r7
     616:	b002      	add	sp, #8
     618:	bd80      	pop	{r7, pc}
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	40000400 	.word	0x40000400

00000620 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     620:	b580      	push	{r7, lr}
     622:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     624:	4b02      	ldr	r3, [pc, #8]	; (630 <system_interrupt_enter_critical_section+0x10>)
     626:	4798      	blx	r3
}
     628:	46c0      	nop			; (mov r8, r8)
     62a:	46bd      	mov	sp, r7
     62c:	bd80      	pop	{r7, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000121 	.word	0x00000121

00000634 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     634:	b580      	push	{r7, lr}
     636:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     638:	4b02      	ldr	r3, [pc, #8]	; (644 <system_interrupt_leave_critical_section+0x10>)
     63a:	4798      	blx	r3
}
     63c:	46c0      	nop			; (mov r8, r8)
     63e:	46bd      	mov	sp, r7
     640:	bd80      	pop	{r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000175 	.word	0x00000175

00000648 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
     648:	b580      	push	{r7, lr}
     64a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     64c:	4b05      	ldr	r3, [pc, #20]	; (664 <system_gclk_is_syncing+0x1c>)
     64e:	785b      	ldrb	r3, [r3, #1]
     650:	b2db      	uxtb	r3, r3
     652:	b25b      	sxtb	r3, r3
     654:	2b00      	cmp	r3, #0
     656:	da01      	bge.n	65c <system_gclk_is_syncing+0x14>
		return true;
     658:	2301      	movs	r3, #1
     65a:	e000      	b.n	65e <system_gclk_is_syncing+0x16>
	}

	return false;
     65c:	2300      	movs	r3, #0
}
     65e:	0018      	movs	r0, r3
     660:	46bd      	mov	sp, r7
     662:	bd80      	pop	{r7, pc}
     664:	40000c00 	.word	0x40000c00

00000668 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
     668:	b580      	push	{r7, lr}
     66a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
     66c:	2108      	movs	r1, #8
     66e:	2000      	movs	r0, #0
     670:	4b07      	ldr	r3, [pc, #28]	; (690 <system_gclk_init+0x28>)
     672:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     674:	4b07      	ldr	r3, [pc, #28]	; (694 <system_gclk_init+0x2c>)
     676:	2201      	movs	r2, #1
     678:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	4b05      	ldr	r3, [pc, #20]	; (694 <system_gclk_init+0x2c>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	b2db      	uxtb	r3, r3
     682:	001a      	movs	r2, r3
     684:	2301      	movs	r3, #1
     686:	4013      	ands	r3, r2
     688:	d1f8      	bne.n	67c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	bd80      	pop	{r7, pc}
     690:	000005c5 	.word	0x000005c5
     694:	40000c00 	.word	0x40000c00

00000698 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     698:	b580      	push	{r7, lr}
     69a:	b086      	sub	sp, #24
     69c:	af00      	add	r7, sp, #0
     69e:	0002      	movs	r2, r0
     6a0:	6039      	str	r1, [r7, #0]
     6a2:	1dfb      	adds	r3, r7, #7
     6a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     6a6:	1dfb      	adds	r3, r7, #7
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
     6ac:	1dfb      	adds	r3, r7, #7
     6ae:	781b      	ldrb	r3, [r3, #0]
     6b0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     6b2:	683b      	ldr	r3, [r7, #0]
     6b4:	781b      	ldrb	r3, [r3, #0]
     6b6:	021b      	lsls	r3, r3, #8
     6b8:	001a      	movs	r2, r3
     6ba:	697b      	ldr	r3, [r7, #20]
     6bc:	4313      	orrs	r3, r2
     6be:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     6c0:	683b      	ldr	r3, [r7, #0]
     6c2:	785b      	ldrb	r3, [r3, #1]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d004      	beq.n	6d2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     6c8:	697b      	ldr	r3, [r7, #20]
     6ca:	2280      	movs	r2, #128	; 0x80
     6cc:	02d2      	lsls	r2, r2, #11
     6ce:	4313      	orrs	r3, r2
     6d0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     6d2:	683b      	ldr	r3, [r7, #0]
     6d4:	7a5b      	ldrb	r3, [r3, #9]
     6d6:	2b00      	cmp	r3, #0
     6d8:	d004      	beq.n	6e4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     6da:	697b      	ldr	r3, [r7, #20]
     6dc:	2280      	movs	r2, #128	; 0x80
     6de:	0312      	lsls	r2, r2, #12
     6e0:	4313      	orrs	r3, r2
     6e2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     6e4:	683b      	ldr	r3, [r7, #0]
     6e6:	685b      	ldr	r3, [r3, #4]
     6e8:	2b01      	cmp	r3, #1
     6ea:	d92c      	bls.n	746 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     6ec:	683b      	ldr	r3, [r7, #0]
     6ee:	685a      	ldr	r2, [r3, #4]
     6f0:	683b      	ldr	r3, [r7, #0]
     6f2:	685b      	ldr	r3, [r3, #4]
     6f4:	3b01      	subs	r3, #1
     6f6:	4013      	ands	r3, r2
     6f8:	d11a      	bne.n	730 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
     6fa:	2300      	movs	r3, #0
     6fc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     6fe:	2302      	movs	r3, #2
     700:	60bb      	str	r3, [r7, #8]
     702:	e005      	b.n	710 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
     704:	68fb      	ldr	r3, [r7, #12]
     706:	3301      	adds	r3, #1
     708:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
     70a:	68bb      	ldr	r3, [r7, #8]
     70c:	005b      	lsls	r3, r3, #1
     70e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
     710:	683b      	ldr	r3, [r7, #0]
     712:	685a      	ldr	r2, [r3, #4]
     714:	68bb      	ldr	r3, [r7, #8]
     716:	429a      	cmp	r2, r3
     718:	d8f4      	bhi.n	704 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     71a:	68fb      	ldr	r3, [r7, #12]
     71c:	021b      	lsls	r3, r3, #8
     71e:	693a      	ldr	r2, [r7, #16]
     720:	4313      	orrs	r3, r2
     722:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     724:	697b      	ldr	r3, [r7, #20]
     726:	2280      	movs	r2, #128	; 0x80
     728:	0352      	lsls	r2, r2, #13
     72a:	4313      	orrs	r3, r2
     72c:	617b      	str	r3, [r7, #20]
     72e:	e00a      	b.n	746 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     730:	683b      	ldr	r3, [r7, #0]
     732:	685b      	ldr	r3, [r3, #4]
     734:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
     736:	693a      	ldr	r2, [r7, #16]
     738:	4313      	orrs	r3, r2
     73a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     73c:	697b      	ldr	r3, [r7, #20]
     73e:	2280      	movs	r2, #128	; 0x80
     740:	0292      	lsls	r2, r2, #10
     742:	4313      	orrs	r3, r2
     744:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     746:	683b      	ldr	r3, [r7, #0]
     748:	7a1b      	ldrb	r3, [r3, #8]
     74a:	2b00      	cmp	r3, #0
     74c:	d004      	beq.n	758 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     74e:	697b      	ldr	r3, [r7, #20]
     750:	2280      	movs	r2, #128	; 0x80
     752:	0392      	lsls	r2, r2, #14
     754:	4313      	orrs	r3, r2
     756:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
     758:	46c0      	nop			; (mov r8, r8)
     75a:	4b13      	ldr	r3, [pc, #76]	; (7a8 <system_gclk_gen_set_config+0x110>)
     75c:	4798      	blx	r3
     75e:	1e03      	subs	r3, r0, #0
     760:	d1fb      	bne.n	75a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
     762:	4b12      	ldr	r3, [pc, #72]	; (7ac <system_gclk_gen_set_config+0x114>)
     764:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     766:	4a12      	ldr	r2, [pc, #72]	; (7b0 <system_gclk_gen_set_config+0x118>)
     768:	1dfb      	adds	r3, r7, #7
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     76e:	46c0      	nop			; (mov r8, r8)
     770:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <system_gclk_gen_set_config+0x110>)
     772:	4798      	blx	r3
     774:	1e03      	subs	r3, r0, #0
     776:	d1fb      	bne.n	770 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     778:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <system_gclk_gen_set_config+0x11c>)
     77a:	693a      	ldr	r2, [r7, #16]
     77c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
     77e:	46c0      	nop			; (mov r8, r8)
     780:	4b09      	ldr	r3, [pc, #36]	; (7a8 <system_gclk_gen_set_config+0x110>)
     782:	4798      	blx	r3
     784:	1e03      	subs	r3, r0, #0
     786:	d1fb      	bne.n	780 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     788:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <system_gclk_gen_set_config+0x11c>)
     78a:	4a0a      	ldr	r2, [pc, #40]	; (7b4 <system_gclk_gen_set_config+0x11c>)
     78c:	6851      	ldr	r1, [r2, #4]
     78e:	2280      	movs	r2, #128	; 0x80
     790:	0252      	lsls	r2, r2, #9
     792:	4011      	ands	r1, r2
     794:	697a      	ldr	r2, [r7, #20]
     796:	430a      	orrs	r2, r1
     798:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
     79a:	4b07      	ldr	r3, [pc, #28]	; (7b8 <system_gclk_gen_set_config+0x120>)
     79c:	4798      	blx	r3
}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	46bd      	mov	sp, r7
     7a2:	b006      	add	sp, #24
     7a4:	bd80      	pop	{r7, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	00000649 	.word	0x00000649
     7ac:	00000621 	.word	0x00000621
     7b0:	40000c08 	.word	0x40000c08
     7b4:	40000c00 	.word	0x40000c00
     7b8:	00000635 	.word	0x00000635

000007bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     7bc:	b580      	push	{r7, lr}
     7be:	b082      	sub	sp, #8
     7c0:	af00      	add	r7, sp, #0
     7c2:	0002      	movs	r2, r0
     7c4:	1dfb      	adds	r3, r7, #7
     7c6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
     7c8:	46c0      	nop			; (mov r8, r8)
     7ca:	4b0e      	ldr	r3, [pc, #56]	; (804 <system_gclk_gen_enable+0x48>)
     7cc:	4798      	blx	r3
     7ce:	1e03      	subs	r3, r0, #0
     7d0:	d1fb      	bne.n	7ca <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
     7d2:	4b0d      	ldr	r3, [pc, #52]	; (808 <system_gclk_gen_enable+0x4c>)
     7d4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     7d6:	4a0d      	ldr	r2, [pc, #52]	; (80c <system_gclk_gen_enable+0x50>)
     7d8:	1dfb      	adds	r3, r7, #7
     7da:	781b      	ldrb	r3, [r3, #0]
     7dc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	4b08      	ldr	r3, [pc, #32]	; (804 <system_gclk_gen_enable+0x48>)
     7e2:	4798      	blx	r3
     7e4:	1e03      	subs	r3, r0, #0
     7e6:	d1fb      	bne.n	7e0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <system_gclk_gen_enable+0x54>)
     7ea:	4a09      	ldr	r2, [pc, #36]	; (810 <system_gclk_gen_enable+0x54>)
     7ec:	6852      	ldr	r2, [r2, #4]
     7ee:	2180      	movs	r1, #128	; 0x80
     7f0:	0249      	lsls	r1, r1, #9
     7f2:	430a      	orrs	r2, r1
     7f4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
     7f6:	4b07      	ldr	r3, [pc, #28]	; (814 <system_gclk_gen_enable+0x58>)
     7f8:	4798      	blx	r3
}
     7fa:	46c0      	nop			; (mov r8, r8)
     7fc:	46bd      	mov	sp, r7
     7fe:	b002      	add	sp, #8
     800:	bd80      	pop	{r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00000649 	.word	0x00000649
     808:	00000621 	.word	0x00000621
     80c:	40000c04 	.word	0x40000c04
     810:	40000c00 	.word	0x40000c00
     814:	00000635 	.word	0x00000635

00000818 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     818:	b580      	push	{r7, lr}
     81a:	b084      	sub	sp, #16
     81c:	af00      	add	r7, sp, #0
     81e:	0002      	movs	r2, r0
     820:	6039      	str	r1, [r7, #0]
     822:	1dfb      	adds	r3, r7, #7
     824:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
     826:	1dfb      	adds	r3, r7, #7
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     82c:	683b      	ldr	r3, [r7, #0]
     82e:	781b      	ldrb	r3, [r3, #0]
     830:	021b      	lsls	r3, r3, #8
     832:	001a      	movs	r2, r3
     834:	68fb      	ldr	r3, [r7, #12]
     836:	4313      	orrs	r3, r2
     838:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     83a:	1dfb      	adds	r3, r7, #7
     83c:	781b      	ldrb	r3, [r3, #0]
     83e:	0018      	movs	r0, r3
     840:	4b04      	ldr	r3, [pc, #16]	; (854 <system_gclk_chan_set_config+0x3c>)
     842:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     844:	4b04      	ldr	r3, [pc, #16]	; (858 <system_gclk_chan_set_config+0x40>)
     846:	68fa      	ldr	r2, [r7, #12]
     848:	b292      	uxth	r2, r2
     84a:	805a      	strh	r2, [r3, #2]
}
     84c:	46c0      	nop			; (mov r8, r8)
     84e:	46bd      	mov	sp, r7
     850:	b004      	add	sp, #16
     852:	bd80      	pop	{r7, pc}
     854:	0000085d 	.word	0x0000085d
     858:	40000c00 	.word	0x40000c00

0000085c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     85c:	b580      	push	{r7, lr}
     85e:	b084      	sub	sp, #16
     860:	af00      	add	r7, sp, #0
     862:	0002      	movs	r2, r0
     864:	1dfb      	adds	r3, r7, #7
     866:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
     868:	4b1c      	ldr	r3, [pc, #112]	; (8dc <system_gclk_chan_disable+0x80>)
     86a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     86c:	4a1c      	ldr	r2, [pc, #112]	; (8e0 <system_gclk_chan_disable+0x84>)
     86e:	1dfb      	adds	r3, r7, #7
     870:	781b      	ldrb	r3, [r3, #0]
     872:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     874:	4b1b      	ldr	r3, [pc, #108]	; (8e4 <system_gclk_chan_disable+0x88>)
     876:	885b      	ldrh	r3, [r3, #2]
     878:	051b      	lsls	r3, r3, #20
     87a:	0f1b      	lsrs	r3, r3, #28
     87c:	b2db      	uxtb	r3, r3
     87e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
     880:	4a18      	ldr	r2, [pc, #96]	; (8e4 <system_gclk_chan_disable+0x88>)
     882:	8853      	ldrh	r3, [r2, #2]
     884:	4918      	ldr	r1, [pc, #96]	; (8e8 <system_gclk_chan_disable+0x8c>)
     886:	400b      	ands	r3, r1
     888:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     88a:	4a16      	ldr	r2, [pc, #88]	; (8e4 <system_gclk_chan_disable+0x88>)
     88c:	4b15      	ldr	r3, [pc, #84]	; (8e4 <system_gclk_chan_disable+0x88>)
     88e:	885b      	ldrh	r3, [r3, #2]
     890:	b29b      	uxth	r3, r3
     892:	4916      	ldr	r1, [pc, #88]	; (8ec <system_gclk_chan_disable+0x90>)
     894:	400b      	ands	r3, r1
     896:	b29b      	uxth	r3, r3
     898:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	4b11      	ldr	r3, [pc, #68]	; (8e4 <system_gclk_chan_disable+0x88>)
     89e:	885b      	ldrh	r3, [r3, #2]
     8a0:	b29b      	uxth	r3, r3
     8a2:	001a      	movs	r2, r3
     8a4:	2380      	movs	r3, #128	; 0x80
     8a6:	01db      	lsls	r3, r3, #7
     8a8:	4013      	ands	r3, r2
     8aa:	d1f7      	bne.n	89c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     8ac:	4a0d      	ldr	r2, [pc, #52]	; (8e4 <system_gclk_chan_disable+0x88>)
     8ae:	68fb      	ldr	r3, [r7, #12]
     8b0:	b2db      	uxtb	r3, r3
     8b2:	1c19      	adds	r1, r3, #0
     8b4:	230f      	movs	r3, #15
     8b6:	400b      	ands	r3, r1
     8b8:	b2d9      	uxtb	r1, r3
     8ba:	8853      	ldrh	r3, [r2, #2]
     8bc:	1c08      	adds	r0, r1, #0
     8be:	210f      	movs	r1, #15
     8c0:	4001      	ands	r1, r0
     8c2:	0208      	lsls	r0, r1, #8
     8c4:	4908      	ldr	r1, [pc, #32]	; (8e8 <system_gclk_chan_disable+0x8c>)
     8c6:	400b      	ands	r3, r1
     8c8:	1c19      	adds	r1, r3, #0
     8ca:	1c03      	adds	r3, r0, #0
     8cc:	430b      	orrs	r3, r1
     8ce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
     8d0:	4b07      	ldr	r3, [pc, #28]	; (8f0 <system_gclk_chan_disable+0x94>)
     8d2:	4798      	blx	r3
}
     8d4:	46c0      	nop			; (mov r8, r8)
     8d6:	46bd      	mov	sp, r7
     8d8:	b004      	add	sp, #16
     8da:	bd80      	pop	{r7, pc}
     8dc:	00000621 	.word	0x00000621
     8e0:	40000c02 	.word	0x40000c02
     8e4:	40000c00 	.word	0x40000c00
     8e8:	fffff0ff 	.word	0xfffff0ff
     8ec:	ffffbfff 	.word	0xffffbfff
     8f0:	00000635 	.word	0x00000635

000008f4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	af00      	add	r7, sp, #0
     8fa:	0002      	movs	r2, r0
     8fc:	1dfb      	adds	r3, r7, #7
     8fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     900:	230f      	movs	r3, #15
     902:	18fb      	adds	r3, r7, r3
     904:	1dfa      	adds	r2, r7, #7
     906:	7812      	ldrb	r2, [r2, #0]
     908:	09d2      	lsrs	r2, r2, #7
     90a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     90c:	230e      	movs	r3, #14
     90e:	18fb      	adds	r3, r7, r3
     910:	1dfa      	adds	r2, r7, #7
     912:	7812      	ldrb	r2, [r2, #0]
     914:	0952      	lsrs	r2, r2, #5
     916:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     918:	4b0d      	ldr	r3, [pc, #52]	; (950 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     91a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     91c:	230f      	movs	r3, #15
     91e:	18fb      	adds	r3, r7, r3
     920:	781b      	ldrb	r3, [r3, #0]
     922:	2b00      	cmp	r3, #0
     924:	d10f      	bne.n	946 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     926:	230f      	movs	r3, #15
     928:	18fb      	adds	r3, r7, r3
     92a:	781b      	ldrb	r3, [r3, #0]
     92c:	009b      	lsls	r3, r3, #2
     92e:	2210      	movs	r2, #16
     930:	4694      	mov	ip, r2
     932:	44bc      	add	ip, r7
     934:	4463      	add	r3, ip
     936:	3b08      	subs	r3, #8
     938:	681a      	ldr	r2, [r3, #0]
     93a:	230e      	movs	r3, #14
     93c:	18fb      	adds	r3, r7, r3
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	01db      	lsls	r3, r3, #7
     942:	18d3      	adds	r3, r2, r3
     944:	e000      	b.n	948 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     946:	2300      	movs	r3, #0
	}
}
     948:	0018      	movs	r0, r3
     94a:	46bd      	mov	sp, r7
     94c:	b004      	add	sp, #16
     94e:	bd80      	pop	{r7, pc}
     950:	41004400 	.word	0x41004400

00000954 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     954:	b580      	push	{r7, lr}
     956:	b088      	sub	sp, #32
     958:	af00      	add	r7, sp, #0
     95a:	60f8      	str	r0, [r7, #12]
     95c:	60b9      	str	r1, [r7, #8]
     95e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     960:	2300      	movs	r3, #0
     962:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     964:	687b      	ldr	r3, [r7, #4]
     966:	78db      	ldrb	r3, [r3, #3]
     968:	2201      	movs	r2, #1
     96a:	4053      	eors	r3, r2
     96c:	b2db      	uxtb	r3, r3
     96e:	2b00      	cmp	r3, #0
     970:	d035      	beq.n	9de <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     972:	687b      	ldr	r3, [r7, #4]
     974:	781b      	ldrb	r3, [r3, #0]
     976:	2b80      	cmp	r3, #128	; 0x80
     978:	d00b      	beq.n	992 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
     97a:	69fb      	ldr	r3, [r7, #28]
     97c:	2280      	movs	r2, #128	; 0x80
     97e:	0252      	lsls	r2, r2, #9
     980:	4313      	orrs	r3, r2
     982:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     984:	687b      	ldr	r3, [r7, #4]
     986:	781b      	ldrb	r3, [r3, #0]
     988:	061b      	lsls	r3, r3, #24
     98a:	001a      	movs	r2, r3
     98c:	69fb      	ldr	r3, [r7, #28]
     98e:	4313      	orrs	r3, r2
     990:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     992:	687b      	ldr	r3, [r7, #4]
     994:	785b      	ldrb	r3, [r3, #1]
     996:	2b00      	cmp	r3, #0
     998:	d003      	beq.n	9a2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     99e:	2b02      	cmp	r3, #2
     9a0:	d110      	bne.n	9c4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     9a2:	69fb      	ldr	r3, [r7, #28]
     9a4:	2280      	movs	r2, #128	; 0x80
     9a6:	0292      	lsls	r2, r2, #10
     9a8:	4313      	orrs	r3, r2
     9aa:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	789b      	ldrb	r3, [r3, #2]
     9b0:	2b00      	cmp	r3, #0
     9b2:	d004      	beq.n	9be <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     9b4:	69fb      	ldr	r3, [r7, #28]
     9b6:	2280      	movs	r2, #128	; 0x80
     9b8:	02d2      	lsls	r2, r2, #11
     9ba:	4313      	orrs	r3, r2
     9bc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	68ba      	ldr	r2, [r7, #8]
     9c2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	785b      	ldrb	r3, [r3, #1]
     9c8:	2b01      	cmp	r3, #1
     9ca:	d003      	beq.n	9d4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     9d0:	2b02      	cmp	r3, #2
     9d2:	d107      	bne.n	9e4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     9d4:	69fb      	ldr	r3, [r7, #28]
     9d6:	4a22      	ldr	r2, [pc, #136]	; (a60 <_system_pinmux_config+0x10c>)
     9d8:	4013      	ands	r3, r2
     9da:	61fb      	str	r3, [r7, #28]
     9dc:	e002      	b.n	9e4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     9de:	68fb      	ldr	r3, [r7, #12]
     9e0:	68ba      	ldr	r2, [r7, #8]
     9e2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     9e4:	68bb      	ldr	r3, [r7, #8]
     9e6:	041b      	lsls	r3, r3, #16
     9e8:	0c1b      	lsrs	r3, r3, #16
     9ea:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
     9ec:	68bb      	ldr	r3, [r7, #8]
     9ee:	0c1b      	lsrs	r3, r3, #16
     9f0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9f2:	69ba      	ldr	r2, [r7, #24]
     9f4:	69fb      	ldr	r3, [r7, #28]
     9f6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     9f8:	22a0      	movs	r2, #160	; 0xa0
     9fa:	05d2      	lsls	r2, r2, #23
     9fc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a02:	697a      	ldr	r2, [r7, #20]
     a04:	69fb      	ldr	r3, [r7, #28]
     a06:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     a08:	22d0      	movs	r2, #208	; 0xd0
     a0a:	0612      	lsls	r2, r2, #24
     a0c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     a0e:	68fb      	ldr	r3, [r7, #12]
     a10:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     a12:	687b      	ldr	r3, [r7, #4]
     a14:	78db      	ldrb	r3, [r3, #3]
     a16:	2201      	movs	r2, #1
     a18:	4053      	eors	r3, r2
     a1a:	b2db      	uxtb	r3, r3
     a1c:	2b00      	cmp	r3, #0
     a1e:	d01a      	beq.n	a56 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     a20:	69fa      	ldr	r2, [r7, #28]
     a22:	2380      	movs	r3, #128	; 0x80
     a24:	02db      	lsls	r3, r3, #11
     a26:	4013      	ands	r3, r2
     a28:	d00a      	beq.n	a40 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     a2a:	687b      	ldr	r3, [r7, #4]
     a2c:	789b      	ldrb	r3, [r3, #2]
     a2e:	2b01      	cmp	r3, #1
     a30:	d103      	bne.n	a3a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
     a32:	68fb      	ldr	r3, [r7, #12]
     a34:	68ba      	ldr	r2, [r7, #8]
     a36:	619a      	str	r2, [r3, #24]
     a38:	e002      	b.n	a40 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	68ba      	ldr	r2, [r7, #8]
     a3e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	785b      	ldrb	r3, [r3, #1]
     a44:	2b01      	cmp	r3, #1
     a46:	d003      	beq.n	a50 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     a4c:	2b02      	cmp	r3, #2
     a4e:	d102      	bne.n	a56 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     a50:	68fb      	ldr	r3, [r7, #12]
     a52:	68ba      	ldr	r2, [r7, #8]
     a54:	609a      	str	r2, [r3, #8]
		}
	}
}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	46bd      	mov	sp, r7
     a5a:	b008      	add	sp, #32
     a5c:	bd80      	pop	{r7, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	fffbffff 	.word	0xfffbffff

00000a64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     a64:	b580      	push	{r7, lr}
     a66:	b084      	sub	sp, #16
     a68:	af00      	add	r7, sp, #0
     a6a:	0002      	movs	r2, r0
     a6c:	6039      	str	r1, [r7, #0]
     a6e:	1dfb      	adds	r3, r7, #7
     a70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     a72:	1dfb      	adds	r3, r7, #7
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	0018      	movs	r0, r3
     a78:	4b0a      	ldr	r3, [pc, #40]	; (aa4 <system_pinmux_pin_set_config+0x40>)
     a7a:	4798      	blx	r3
     a7c:	0003      	movs	r3, r0
     a7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     a80:	1dfb      	adds	r3, r7, #7
     a82:	781b      	ldrb	r3, [r3, #0]
     a84:	221f      	movs	r2, #31
     a86:	4013      	ands	r3, r2
     a88:	2201      	movs	r2, #1
     a8a:	409a      	lsls	r2, r3
     a8c:	0013      	movs	r3, r2
     a8e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
     a90:	683a      	ldr	r2, [r7, #0]
     a92:	68b9      	ldr	r1, [r7, #8]
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	0018      	movs	r0, r3
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <system_pinmux_pin_set_config+0x44>)
     a9a:	4798      	blx	r3
}
     a9c:	46c0      	nop			; (mov r8, r8)
     a9e:	46bd      	mov	sp, r7
     aa0:	b004      	add	sp, #16
     aa2:	bd80      	pop	{r7, pc}
     aa4:	000008f5 	.word	0x000008f5
     aa8:	00000955 	.word	0x00000955

00000aac <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
     aac:	b580      	push	{r7, lr}
     aae:	af00      	add	r7, sp, #0
	return;
     ab0:	46c0      	nop			; (mov r8, r8)
}
     ab2:	46bd      	mov	sp, r7
     ab4:	bd80      	pop	{r7, pc}
	...

00000ab8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     ab8:	b580      	push	{r7, lr}
     aba:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     abc:	4b06      	ldr	r3, [pc, #24]	; (ad8 <system_init+0x20>)
     abe:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     ac0:	4b06      	ldr	r3, [pc, #24]	; (adc <system_init+0x24>)
     ac2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     ac4:	4b06      	ldr	r3, [pc, #24]	; (ae0 <system_init+0x28>)
     ac6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     ac8:	4b06      	ldr	r3, [pc, #24]	; (ae4 <system_init+0x2c>)
     aca:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <system_init+0x30>)
     ace:	4798      	blx	r3
}
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	000004f1 	.word	0x000004f1
     adc:	00000115 	.word	0x00000115
     ae0:	00000aad 	.word	0x00000aad
     ae4:	00000aad 	.word	0x00000aad
     ae8:	00000aad 	.word	0x00000aad

00000aec <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     aec:	b580      	push	{r7, lr}
     aee:	af00      	add	r7, sp, #0
     af0:	2000      	movs	r0, #0
     af2:	4b02      	ldr	r3, [pc, #8]	; (afc <TCC0_Handler+0x10>)
     af4:	4798      	blx	r3
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	46bd      	mov	sp, r7
     afa:	bd80      	pop	{r7, pc}
     afc:	00000b29 	.word	0x00000b29

00000b00 <TCC1_Handler>:
     b00:	b580      	push	{r7, lr}
     b02:	af00      	add	r7, sp, #0
     b04:	2001      	movs	r0, #1
     b06:	4b02      	ldr	r3, [pc, #8]	; (b10 <TCC1_Handler+0x10>)
     b08:	4798      	blx	r3
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	46bd      	mov	sp, r7
     b0e:	bd80      	pop	{r7, pc}
     b10:	00000b29 	.word	0x00000b29

00000b14 <TCC2_Handler>:
     b14:	b580      	push	{r7, lr}
     b16:	af00      	add	r7, sp, #0
     b18:	2002      	movs	r0, #2
     b1a:	4b02      	ldr	r3, [pc, #8]	; (b24 <TCC2_Handler+0x10>)
     b1c:	4798      	blx	r3
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	46bd      	mov	sp, r7
     b22:	bd80      	pop	{r7, pc}
     b24:	00000b29 	.word	0x00000b29

00000b28 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     b28:	b580      	push	{r7, lr}
     b2a:	b086      	sub	sp, #24
     b2c:	af00      	add	r7, sp, #0
     b2e:	0002      	movs	r2, r0
     b30:	1dfb      	adds	r3, r7, #7
     b32:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
     b34:	1dfb      	adds	r3, r7, #7
     b36:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
     b38:	4b18      	ldr	r3, [pc, #96]	; (b9c <_tcc_interrupt_handler+0x74>)
     b3a:	0092      	lsls	r2, r2, #2
     b3c:	58d3      	ldr	r3, [r2, r3]
     b3e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b40:	693b      	ldr	r3, [r7, #16]
     b42:	681b      	ldr	r3, [r3, #0]
     b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
     b46:	693b      	ldr	r3, [r7, #16]
     b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b4a:	401a      	ands	r2, r3
			module->enable_callback_mask);
     b4c:	693b      	ldr	r3, [r7, #16]
     b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     b50:	4013      	ands	r3, r2
     b52:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     b54:	2300      	movs	r3, #0
     b56:	617b      	str	r3, [r7, #20]
     b58:	e019      	b.n	b8e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     b5a:	4b11      	ldr	r3, [pc, #68]	; (ba0 <_tcc_interrupt_handler+0x78>)
     b5c:	697a      	ldr	r2, [r7, #20]
     b5e:	0092      	lsls	r2, r2, #2
     b60:	58d3      	ldr	r3, [r2, r3]
     b62:	68fa      	ldr	r2, [r7, #12]
     b64:	4013      	ands	r3, r2
     b66:	d00f      	beq.n	b88 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     b68:	693a      	ldr	r2, [r7, #16]
     b6a:	697b      	ldr	r3, [r7, #20]
     b6c:	009b      	lsls	r3, r3, #2
     b6e:	18d3      	adds	r3, r2, r3
     b70:	3304      	adds	r3, #4
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	693a      	ldr	r2, [r7, #16]
     b76:	0010      	movs	r0, r2
     b78:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     b7a:	693b      	ldr	r3, [r7, #16]
     b7c:	681b      	ldr	r3, [r3, #0]
     b7e:	4a08      	ldr	r2, [pc, #32]	; (ba0 <_tcc_interrupt_handler+0x78>)
     b80:	6979      	ldr	r1, [r7, #20]
     b82:	0089      	lsls	r1, r1, #2
     b84:	588a      	ldr	r2, [r1, r2]
     b86:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     b88:	697b      	ldr	r3, [r7, #20]
     b8a:	3301      	adds	r3, #1
     b8c:	617b      	str	r3, [r7, #20]
     b8e:	697b      	ldr	r3, [r7, #20]
     b90:	2b0b      	cmp	r3, #11
     b92:	dde2      	ble.n	b5a <_tcc_interrupt_handler+0x32>
		}
	}
}
     b94:	46c0      	nop			; (mov r8, r8)
     b96:	46bd      	mov	sp, r7
     b98:	b006      	add	sp, #24
     b9a:	bd80      	pop	{r7, pc}
     b9c:	2000004c 	.word	0x2000004c
     ba0:	000010fc 	.word	0x000010fc

00000ba4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     ba4:	b580      	push	{r7, lr}
     ba6:	b082      	sub	sp, #8
     ba8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     baa:	4b2f      	ldr	r3, [pc, #188]	; (c68 <Reset_Handler+0xc4>)
     bac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     bae:	4b2f      	ldr	r3, [pc, #188]	; (c6c <Reset_Handler+0xc8>)
     bb0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     bb2:	687a      	ldr	r2, [r7, #4]
     bb4:	683b      	ldr	r3, [r7, #0]
     bb6:	429a      	cmp	r2, r3
     bb8:	d00c      	beq.n	bd4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     bba:	e007      	b.n	bcc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     bbc:	683b      	ldr	r3, [r7, #0]
     bbe:	1d1a      	adds	r2, r3, #4
     bc0:	603a      	str	r2, [r7, #0]
     bc2:	687a      	ldr	r2, [r7, #4]
     bc4:	1d11      	adds	r1, r2, #4
     bc6:	6079      	str	r1, [r7, #4]
     bc8:	6812      	ldr	r2, [r2, #0]
     bca:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     bcc:	683a      	ldr	r2, [r7, #0]
     bce:	4b28      	ldr	r3, [pc, #160]	; (c70 <Reset_Handler+0xcc>)
     bd0:	429a      	cmp	r2, r3
     bd2:	d3f3      	bcc.n	bbc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     bd4:	4b27      	ldr	r3, [pc, #156]	; (c74 <Reset_Handler+0xd0>)
     bd6:	603b      	str	r3, [r7, #0]
     bd8:	e004      	b.n	be4 <Reset_Handler+0x40>
                *pDest++ = 0;
     bda:	683b      	ldr	r3, [r7, #0]
     bdc:	1d1a      	adds	r2, r3, #4
     bde:	603a      	str	r2, [r7, #0]
     be0:	2200      	movs	r2, #0
     be2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     be4:	683a      	ldr	r2, [r7, #0]
     be6:	4b24      	ldr	r3, [pc, #144]	; (c78 <Reset_Handler+0xd4>)
     be8:	429a      	cmp	r2, r3
     bea:	d3f6      	bcc.n	bda <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     bec:	4b23      	ldr	r3, [pc, #140]	; (c7c <Reset_Handler+0xd8>)
     bee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     bf0:	4b23      	ldr	r3, [pc, #140]	; (c80 <Reset_Handler+0xdc>)
     bf2:	687a      	ldr	r2, [r7, #4]
     bf4:	21ff      	movs	r1, #255	; 0xff
     bf6:	438a      	bics	r2, r1
     bf8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     bfa:	4a22      	ldr	r2, [pc, #136]	; (c84 <Reset_Handler+0xe0>)
     bfc:	2390      	movs	r3, #144	; 0x90
     bfe:	005b      	lsls	r3, r3, #1
     c00:	2102      	movs	r1, #2
     c02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     c04:	4a20      	ldr	r2, [pc, #128]	; (c88 <Reset_Handler+0xe4>)
     c06:	78d3      	ldrb	r3, [r2, #3]
     c08:	2103      	movs	r1, #3
     c0a:	438b      	bics	r3, r1
     c0c:	1c19      	adds	r1, r3, #0
     c0e:	2302      	movs	r3, #2
     c10:	430b      	orrs	r3, r1
     c12:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     c14:	4a1c      	ldr	r2, [pc, #112]	; (c88 <Reset_Handler+0xe4>)
     c16:	78d3      	ldrb	r3, [r2, #3]
     c18:	210c      	movs	r1, #12
     c1a:	438b      	bics	r3, r1
     c1c:	1c19      	adds	r1, r3, #0
     c1e:	2308      	movs	r3, #8
     c20:	430b      	orrs	r3, r1
     c22:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     c24:	4a19      	ldr	r2, [pc, #100]	; (c8c <Reset_Handler+0xe8>)
     c26:	7b93      	ldrb	r3, [r2, #14]
     c28:	2130      	movs	r1, #48	; 0x30
     c2a:	438b      	bics	r3, r1
     c2c:	1c19      	adds	r1, r3, #0
     c2e:	2320      	movs	r3, #32
     c30:	430b      	orrs	r3, r1
     c32:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     c34:	4a15      	ldr	r2, [pc, #84]	; (c8c <Reset_Handler+0xe8>)
     c36:	7b93      	ldrb	r3, [r2, #14]
     c38:	210c      	movs	r1, #12
     c3a:	438b      	bics	r3, r1
     c3c:	1c19      	adds	r1, r3, #0
     c3e:	2308      	movs	r3, #8
     c40:	430b      	orrs	r3, r1
     c42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     c44:	4a11      	ldr	r2, [pc, #68]	; (c8c <Reset_Handler+0xe8>)
     c46:	7b93      	ldrb	r3, [r2, #14]
     c48:	2103      	movs	r1, #3
     c4a:	438b      	bics	r3, r1
     c4c:	1c19      	adds	r1, r3, #0
     c4e:	2302      	movs	r3, #2
     c50:	430b      	orrs	r3, r1
     c52:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     c54:	4a0e      	ldr	r2, [pc, #56]	; (c90 <Reset_Handler+0xec>)
     c56:	6853      	ldr	r3, [r2, #4]
     c58:	2180      	movs	r1, #128	; 0x80
     c5a:	430b      	orrs	r3, r1
     c5c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     c5e:	4b0d      	ldr	r3, [pc, #52]	; (c94 <Reset_Handler+0xf0>)
     c60:	4798      	blx	r3

        /* Branch to main function */
        main();
     c62:	4b0d      	ldr	r3, [pc, #52]	; (c98 <Reset_Handler+0xf4>)
     c64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     c66:	e7fe      	b.n	c66 <Reset_Handler+0xc2>
     c68:	0000114c 	.word	0x0000114c
     c6c:	20000000 	.word	0x20000000
     c70:	2000000c 	.word	0x2000000c
     c74:	2000000c 	.word	0x2000000c
     c78:	20000058 	.word	0x20000058
     c7c:	00000000 	.word	0x00000000
     c80:	e000ed00 	.word	0xe000ed00
     c84:	41007000 	.word	0x41007000
     c88:	41005000 	.word	0x41005000
     c8c:	41004800 	.word	0x41004800
     c90:	41004000 	.word	0x41004000
     c94:	00001091 	.word	0x00001091
     c98:	00001071 	.word	0x00001071

00000c9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     c9c:	b580      	push	{r7, lr}
     c9e:	af00      	add	r7, sp, #0
        while (1) {
     ca0:	e7fe      	b.n	ca0 <Dummy_Handler+0x4>
	...

00000ca4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b082      	sub	sp, #8
     ca8:	af00      	add	r7, sp, #0
     caa:	0002      	movs	r2, r0
     cac:	1dfb      	adds	r3, r7, #7
     cae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     cb0:	4b06      	ldr	r3, [pc, #24]	; (ccc <NVIC_EnableIRQ+0x28>)
     cb2:	1dfa      	adds	r2, r7, #7
     cb4:	7812      	ldrb	r2, [r2, #0]
     cb6:	0011      	movs	r1, r2
     cb8:	221f      	movs	r2, #31
     cba:	400a      	ands	r2, r1
     cbc:	2101      	movs	r1, #1
     cbe:	4091      	lsls	r1, r2
     cc0:	000a      	movs	r2, r1
     cc2:	601a      	str	r2, [r3, #0]
}
     cc4:	46c0      	nop			; (mov r8, r8)
     cc6:	46bd      	mov	sp, r7
     cc8:	b002      	add	sp, #8
     cca:	bd80      	pop	{r7, pc}
     ccc:	e000e100 	.word	0xe000e100

00000cd0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     cd0:	b5b0      	push	{r4, r5, r7, lr}
     cd2:	b082      	sub	sp, #8
     cd4:	af00      	add	r7, sp, #0
     cd6:	0002      	movs	r2, r0
     cd8:	6039      	str	r1, [r7, #0]
     cda:	1dfb      	adds	r3, r7, #7
     cdc:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
     cde:	1dfb      	adds	r3, r7, #7
     ce0:	781b      	ldrb	r3, [r3, #0]
     ce2:	2b7f      	cmp	r3, #127	; 0x7f
     ce4:	d932      	bls.n	d4c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     ce6:	4c2f      	ldr	r4, [pc, #188]	; (da4 <NVIC_SetPriority+0xd4>)
     ce8:	1dfb      	adds	r3, r7, #7
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	001a      	movs	r2, r3
     cee:	230f      	movs	r3, #15
     cf0:	4013      	ands	r3, r2
     cf2:	3b08      	subs	r3, #8
     cf4:	0899      	lsrs	r1, r3, #2
     cf6:	4a2b      	ldr	r2, [pc, #172]	; (da4 <NVIC_SetPriority+0xd4>)
     cf8:	1dfb      	adds	r3, r7, #7
     cfa:	781b      	ldrb	r3, [r3, #0]
     cfc:	0018      	movs	r0, r3
     cfe:	230f      	movs	r3, #15
     d00:	4003      	ands	r3, r0
     d02:	3b08      	subs	r3, #8
     d04:	089b      	lsrs	r3, r3, #2
     d06:	3306      	adds	r3, #6
     d08:	009b      	lsls	r3, r3, #2
     d0a:	18d3      	adds	r3, r2, r3
     d0c:	3304      	adds	r3, #4
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	1dfa      	adds	r2, r7, #7
     d12:	7812      	ldrb	r2, [r2, #0]
     d14:	0010      	movs	r0, r2
     d16:	2203      	movs	r2, #3
     d18:	4002      	ands	r2, r0
     d1a:	00d2      	lsls	r2, r2, #3
     d1c:	20ff      	movs	r0, #255	; 0xff
     d1e:	4090      	lsls	r0, r2
     d20:	0002      	movs	r2, r0
     d22:	43d2      	mvns	r2, r2
     d24:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     d26:	683b      	ldr	r3, [r7, #0]
     d28:	019b      	lsls	r3, r3, #6
     d2a:	20ff      	movs	r0, #255	; 0xff
     d2c:	4018      	ands	r0, r3
     d2e:	1dfb      	adds	r3, r7, #7
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	001d      	movs	r5, r3
     d34:	2303      	movs	r3, #3
     d36:	402b      	ands	r3, r5
     d38:	00db      	lsls	r3, r3, #3
     d3a:	4098      	lsls	r0, r3
     d3c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     d3e:	431a      	orrs	r2, r3
     d40:	1d8b      	adds	r3, r1, #6
     d42:	009b      	lsls	r3, r3, #2
     d44:	18e3      	adds	r3, r4, r3
     d46:	3304      	adds	r3, #4
     d48:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
     d4a:	e027      	b.n	d9c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     d4c:	4c16      	ldr	r4, [pc, #88]	; (da8 <NVIC_SetPriority+0xd8>)
     d4e:	1dfb      	adds	r3, r7, #7
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b25b      	sxtb	r3, r3
     d54:	089b      	lsrs	r3, r3, #2
     d56:	4914      	ldr	r1, [pc, #80]	; (da8 <NVIC_SetPriority+0xd8>)
     d58:	1dfa      	adds	r2, r7, #7
     d5a:	7812      	ldrb	r2, [r2, #0]
     d5c:	b252      	sxtb	r2, r2
     d5e:	0892      	lsrs	r2, r2, #2
     d60:	32c0      	adds	r2, #192	; 0xc0
     d62:	0092      	lsls	r2, r2, #2
     d64:	5852      	ldr	r2, [r2, r1]
     d66:	1df9      	adds	r1, r7, #7
     d68:	7809      	ldrb	r1, [r1, #0]
     d6a:	0008      	movs	r0, r1
     d6c:	2103      	movs	r1, #3
     d6e:	4001      	ands	r1, r0
     d70:	00c9      	lsls	r1, r1, #3
     d72:	20ff      	movs	r0, #255	; 0xff
     d74:	4088      	lsls	r0, r1
     d76:	0001      	movs	r1, r0
     d78:	43c9      	mvns	r1, r1
     d7a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
     d7c:	683a      	ldr	r2, [r7, #0]
     d7e:	0192      	lsls	r2, r2, #6
     d80:	20ff      	movs	r0, #255	; 0xff
     d82:	4010      	ands	r0, r2
     d84:	1dfa      	adds	r2, r7, #7
     d86:	7812      	ldrb	r2, [r2, #0]
     d88:	0015      	movs	r5, r2
     d8a:	2203      	movs	r2, #3
     d8c:	402a      	ands	r2, r5
     d8e:	00d2      	lsls	r2, r2, #3
     d90:	4090      	lsls	r0, r2
     d92:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     d94:	430a      	orrs	r2, r1
     d96:	33c0      	adds	r3, #192	; 0xc0
     d98:	009b      	lsls	r3, r3, #2
     d9a:	511a      	str	r2, [r3, r4]
}
     d9c:	46c0      	nop			; (mov r8, r8)
     d9e:	46bd      	mov	sp, r7
     da0:	b002      	add	sp, #8
     da2:	bdb0      	pop	{r4, r5, r7, pc}
     da4:	e000ed00 	.word	0xe000ed00
     da8:	e000e100 	.word	0xe000e100

00000dac <system_pinmux_get_group_from_gpio_pin>:
{
     dac:	b580      	push	{r7, lr}
     dae:	b084      	sub	sp, #16
     db0:	af00      	add	r7, sp, #0
     db2:	0002      	movs	r2, r0
     db4:	1dfb      	adds	r3, r7, #7
     db6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     db8:	230f      	movs	r3, #15
     dba:	18fb      	adds	r3, r7, r3
     dbc:	1dfa      	adds	r2, r7, #7
     dbe:	7812      	ldrb	r2, [r2, #0]
     dc0:	09d2      	lsrs	r2, r2, #7
     dc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     dc4:	230e      	movs	r3, #14
     dc6:	18fb      	adds	r3, r7, r3
     dc8:	1dfa      	adds	r2, r7, #7
     dca:	7812      	ldrb	r2, [r2, #0]
     dcc:	0952      	lsrs	r2, r2, #5
     dce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     dd0:	4b0d      	ldr	r3, [pc, #52]	; (e08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     dd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     dd4:	230f      	movs	r3, #15
     dd6:	18fb      	adds	r3, r7, r3
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	2b00      	cmp	r3, #0
     ddc:	d10f      	bne.n	dfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     dde:	230f      	movs	r3, #15
     de0:	18fb      	adds	r3, r7, r3
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	009b      	lsls	r3, r3, #2
     de6:	2210      	movs	r2, #16
     de8:	4694      	mov	ip, r2
     dea:	44bc      	add	ip, r7
     dec:	4463      	add	r3, ip
     dee:	3b08      	subs	r3, #8
     df0:	681a      	ldr	r2, [r3, #0]
     df2:	230e      	movs	r3, #14
     df4:	18fb      	adds	r3, r7, r3
     df6:	781b      	ldrb	r3, [r3, #0]
     df8:	01db      	lsls	r3, r3, #7
     dfa:	18d3      	adds	r3, r2, r3
     dfc:	e000      	b.n	e00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     dfe:	2300      	movs	r3, #0
}
     e00:	0018      	movs	r0, r3
     e02:	46bd      	mov	sp, r7
     e04:	b004      	add	sp, #16
     e06:	bd80      	pop	{r7, pc}
     e08:	41004400 	.word	0x41004400

00000e0c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b082      	sub	sp, #8
     e10:	af00      	add	r7, sp, #0
     e12:	0002      	movs	r2, r0
     e14:	1dfb      	adds	r3, r7, #7
     e16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     e18:	1dfb      	adds	r3, r7, #7
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	0018      	movs	r0, r3
     e1e:	4b03      	ldr	r3, [pc, #12]	; (e2c <port_get_group_from_gpio_pin+0x20>)
     e20:	4798      	blx	r3
     e22:	0003      	movs	r3, r0
}
     e24:	0018      	movs	r0, r3
     e26:	46bd      	mov	sp, r7
     e28:	b002      	add	sp, #8
     e2a:	bd80      	pop	{r7, pc}
     e2c:	00000dad 	.word	0x00000dad

00000e30 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     e30:	b580      	push	{r7, lr}
     e32:	b082      	sub	sp, #8
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	2200      	movs	r2, #0
     e3c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	2201      	movs	r2, #1
     e42:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	2200      	movs	r2, #0
     e48:	709a      	strb	r2, [r3, #2]
}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	46bd      	mov	sp, r7
     e4e:	b002      	add	sp, #8
     e50:	bd80      	pop	{r7, pc}
	...

00000e54 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     e54:	b580      	push	{r7, lr}
     e56:	b084      	sub	sp, #16
     e58:	af00      	add	r7, sp, #0
     e5a:	0002      	movs	r2, r0
     e5c:	1dfb      	adds	r3, r7, #7
     e5e:	701a      	strb	r2, [r3, #0]
     e60:	1dbb      	adds	r3, r7, #6
     e62:	1c0a      	adds	r2, r1, #0
     e64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     e66:	1dfb      	adds	r3, r7, #7
     e68:	781b      	ldrb	r3, [r3, #0]
     e6a:	0018      	movs	r0, r3
     e6c:	4b0d      	ldr	r3, [pc, #52]	; (ea4 <port_pin_set_output_level+0x50>)
     e6e:	4798      	blx	r3
     e70:	0003      	movs	r3, r0
     e72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e74:	1dfb      	adds	r3, r7, #7
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	221f      	movs	r2, #31
     e7a:	4013      	ands	r3, r2
     e7c:	2201      	movs	r2, #1
     e7e:	409a      	lsls	r2, r3
     e80:	0013      	movs	r3, r2
     e82:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     e84:	1dbb      	adds	r3, r7, #6
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2b00      	cmp	r3, #0
     e8a:	d003      	beq.n	e94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     e8c:	68fb      	ldr	r3, [r7, #12]
     e8e:	68ba      	ldr	r2, [r7, #8]
     e90:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     e92:	e002      	b.n	e9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	68ba      	ldr	r2, [r7, #8]
     e98:	615a      	str	r2, [r3, #20]
}
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	46bd      	mov	sp, r7
     e9e:	b004      	add	sp, #16
     ea0:	bd80      	pop	{r7, pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00000e0d 	.word	0x00000e0d

00000ea8 <led_pwm_init>:
	tcc_init(&tcc_instance,PWM_MODULE,&config_tcc);
	tcc_enable(&tcc_instance);
}

void led_pwm_init(void)
{
     ea8:	b580      	push	{r7, lr}
     eaa:	b082      	sub	sp, #8
     eac:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
     eae:	1d3b      	adds	r3, r7, #4
     eb0:	0018      	movs	r0, r3
     eb2:	4b13      	ldr	r3, [pc, #76]	; (f00 <led_pwm_init+0x58>)
     eb4:	4798      	blx	r3
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     eb6:	1d3b      	adds	r3, r7, #4
     eb8:	2202      	movs	r2, #2
     eba:	705a      	strb	r2, [r3, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     ebc:	1d3b      	adds	r3, r7, #4
     ebe:	2201      	movs	r2, #1
     ec0:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_PWM_0_PIN,&config_port_pin);
     ec2:	1d3b      	adds	r3, r7, #4
     ec4:	0019      	movs	r1, r3
     ec6:	200c      	movs	r0, #12
     ec8:	4b0e      	ldr	r3, [pc, #56]	; (f04 <led_pwm_init+0x5c>)
     eca:	4798      	blx	r3
	port_pin_set_config(LED_PWM_1_PIN,&config_port_pin);
     ecc:	1d3b      	adds	r3, r7, #4
     ece:	0019      	movs	r1, r3
     ed0:	200e      	movs	r0, #14
     ed2:	4b0c      	ldr	r3, [pc, #48]	; (f04 <led_pwm_init+0x5c>)
     ed4:	4798      	blx	r3
	port_pin_set_config(LED_PWM_2_PIN,&config_port_pin);
     ed6:	1d3b      	adds	r3, r7, #4
     ed8:	0019      	movs	r1, r3
     eda:	202b      	movs	r0, #43	; 0x2b
     edc:	4b09      	ldr	r3, [pc, #36]	; (f04 <led_pwm_init+0x5c>)
     ede:	4798      	blx	r3
	
	port_pin_set_output_level(LED_PWM_2_PIN,false);	//RED
     ee0:	2100      	movs	r1, #0
     ee2:	202b      	movs	r0, #43	; 0x2b
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <led_pwm_init+0x60>)
     ee6:	4798      	blx	r3
	port_pin_set_output_level(LED_PWM_1_PIN,false);	//GREEN
     ee8:	2100      	movs	r1, #0
     eea:	200e      	movs	r0, #14
     eec:	4b06      	ldr	r3, [pc, #24]	; (f08 <led_pwm_init+0x60>)
     eee:	4798      	blx	r3
	port_pin_set_output_level(LED_PWM_0_PIN,false);	//BLUE
     ef0:	2100      	movs	r1, #0
     ef2:	200c      	movs	r0, #12
     ef4:	4b04      	ldr	r3, [pc, #16]	; (f08 <led_pwm_init+0x60>)
     ef6:	4798      	blx	r3
}
     ef8:	46c0      	nop			; (mov r8, r8)
     efa:	46bd      	mov	sp, r7
     efc:	b002      	add	sp, #8
     efe:	bd80      	pop	{r7, pc}
     f00:	00000e31 	.word	0x00000e31
     f04:	000001dd 	.word	0x000001dd
     f08:	00000e55 	.word	0x00000e55

00000f0c <init_TC3>:

void init_TC3(void)
{	
     f0c:	b580      	push	{r7, lr}
     f0e:	af00      	add	r7, sp, #0
	PM->APBCMASK.reg |= PM_APBCMASK_TC3;
     f10:	4b15      	ldr	r3, [pc, #84]	; (f68 <init_TC3+0x5c>)
     f12:	4a15      	ldr	r2, [pc, #84]	; (f68 <init_TC3+0x5c>)
     f14:	6a12      	ldr	r2, [r2, #32]
     f16:	2180      	movs	r1, #128	; 0x80
     f18:	0109      	lsls	r1, r1, #4
     f1a:	430a      	orrs	r2, r1
     f1c:	621a      	str	r2, [r3, #32]

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_ID_TCC2_TC3;
     f1e:	4b13      	ldr	r3, [pc, #76]	; (f6c <init_TC3+0x60>)
     f20:	4a13      	ldr	r2, [pc, #76]	; (f70 <init_TC3+0x64>)
     f22:	805a      	strh	r2, [r3, #2]
	
	TC3->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_WAVEGEN_MFRQ |
     f24:	4b13      	ldr	r3, [pc, #76]	; (f74 <init_TC3+0x68>)
     f26:	4a14      	ldr	r2, [pc, #80]	; (f78 <init_TC3+0x6c>)
     f28:	801a      	strh	r2, [r3, #0]
	TC_CTRLA_PRESCALER_DIV1 | TC_CTRLA_PRESCSYNC_RESYNC;

	TC3->COUNT16.COUNT.reg = 0;
     f2a:	4b12      	ldr	r3, [pc, #72]	; (f74 <init_TC3+0x68>)
     f2c:	2200      	movs	r2, #0
     f2e:	821a      	strh	r2, [r3, #16]
	TC3->COUNT16.CC[0].reg = COMPARE_MATCH;
     f30:	4b10      	ldr	r3, [pc, #64]	; (f74 <init_TC3+0x68>)
     f32:	22fa      	movs	r2, #250	; 0xfa
     f34:	01d2      	lsls	r2, r2, #7
     f36:	831a      	strh	r2, [r3, #24]
	
	
	TC3->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     f38:	4a0e      	ldr	r2, [pc, #56]	; (f74 <init_TC3+0x68>)
     f3a:	4b0e      	ldr	r3, [pc, #56]	; (f74 <init_TC3+0x68>)
     f3c:	881b      	ldrh	r3, [r3, #0]
     f3e:	b29b      	uxth	r3, r3
     f40:	2102      	movs	r1, #2
     f42:	430b      	orrs	r3, r1
     f44:	b29b      	uxth	r3, r3
     f46:	8013      	strh	r3, [r2, #0]
	TC3->COUNT16.DBGCTRL.reg = TC_DBGCTRL_DBGRUN;
     f48:	4b0a      	ldr	r3, [pc, #40]	; (f74 <init_TC3+0x68>)
     f4a:	2201      	movs	r2, #1
     f4c:	721a      	strb	r2, [r3, #8]
	TC3->COUNT16.INTENSET.reg = TC_INTENSET_MC0;
     f4e:	4b09      	ldr	r3, [pc, #36]	; (f74 <init_TC3+0x68>)
     f50:	2210      	movs	r2, #16
     f52:	735a      	strb	r2, [r3, #13]
	NVIC_EnableIRQ(TC3_IRQn);
     f54:	2012      	movs	r0, #18
     f56:	4b09      	ldr	r3, [pc, #36]	; (f7c <init_TC3+0x70>)
     f58:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,2);
     f5a:	2102      	movs	r1, #2
     f5c:	2012      	movs	r0, #18
     f5e:	4b08      	ldr	r3, [pc, #32]	; (f80 <init_TC3+0x74>)
     f60:	4798      	blx	r3
	/*PORT->Group[0].DIRSET.reg=18;
	PORT->Group[0].PINCFG[18].bit.PMUXEN=1;
	PORT->Group[0].PMUX[9].bit.PMUXE = 4;*/
}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	46bd      	mov	sp, r7
     f66:	bd80      	pop	{r7, pc}
     f68:	40000400 	.word	0x40000400
     f6c:	40000c00 	.word	0x40000c00
     f70:	0000401b 	.word	0x0000401b
     f74:	42002c00 	.word	0x42002c00
     f78:	00002020 	.word	0x00002020
     f7c:	00000ca5 	.word	0x00000ca5
     f80:	00000cd1 	.word	0x00000cd1

00000f84 <TC3_Handler>:

void TC3_Handler()
{
     f84:	b580      	push	{r7, lr}
     f86:	af00      	add	r7, sp, #0

	static int pwm_count = 0;
	static int dutycycle = PWM_FREQ/8;
	static bool fade_way = true;
	
	pwm_count++;
     f88:	4b35      	ldr	r3, [pc, #212]	; (1060 <TC3_Handler+0xdc>)
     f8a:	681b      	ldr	r3, [r3, #0]
     f8c:	1c5a      	adds	r2, r3, #1
     f8e:	4b34      	ldr	r3, [pc, #208]	; (1060 <TC3_Handler+0xdc>)
     f90:	601a      	str	r2, [r3, #0]
	if (pwm_count > PWM_FREQ)
     f92:	4b33      	ldr	r3, [pc, #204]	; (1060 <TC3_Handler+0xdc>)
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	2bfa      	cmp	r3, #250	; 0xfa
     f98:	dd02      	ble.n	fa0 <TC3_Handler+0x1c>
	{
		pwm_count = 0;
     f9a:	4b31      	ldr	r3, [pc, #196]	; (1060 <TC3_Handler+0xdc>)
     f9c:	2200      	movs	r2, #0
     f9e:	601a      	str	r2, [r3, #0]
	}
	
	
		
	
	if (pwm_count > dutycycle)
     fa0:	4b2f      	ldr	r3, [pc, #188]	; (1060 <TC3_Handler+0xdc>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	4b2f      	ldr	r3, [pc, #188]	; (1064 <TC3_Handler+0xe0>)
     fa6:	681b      	ldr	r3, [r3, #0]
     fa8:	429a      	cmp	r2, r3
     faa:	dd0c      	ble.n	fc6 <TC3_Handler+0x42>
	{
		port_pin_set_output_level(LED_PWM_0_PIN,true);
     fac:	2101      	movs	r1, #1
     fae:	200c      	movs	r0, #12
     fb0:	4b2d      	ldr	r3, [pc, #180]	; (1068 <TC3_Handler+0xe4>)
     fb2:	4798      	blx	r3
		port_pin_set_output_level(LED_PWM_1_PIN,true);
     fb4:	2101      	movs	r1, #1
     fb6:	200e      	movs	r0, #14
     fb8:	4b2b      	ldr	r3, [pc, #172]	; (1068 <TC3_Handler+0xe4>)
     fba:	4798      	blx	r3
		port_pin_set_output_level(LED_PWM_2_PIN,true);
     fbc:	2101      	movs	r1, #1
     fbe:	202b      	movs	r0, #43	; 0x2b
     fc0:	4b29      	ldr	r3, [pc, #164]	; (1068 <TC3_Handler+0xe4>)
     fc2:	4798      	blx	r3
     fc4:	e00b      	b.n	fde <TC3_Handler+0x5a>
	}
	else
	{
		port_pin_set_output_level(LED_PWM_0_PIN,false);
     fc6:	2100      	movs	r1, #0
     fc8:	200c      	movs	r0, #12
     fca:	4b27      	ldr	r3, [pc, #156]	; (1068 <TC3_Handler+0xe4>)
     fcc:	4798      	blx	r3
		port_pin_set_output_level(LED_PWM_1_PIN,false);
     fce:	2100      	movs	r1, #0
     fd0:	200e      	movs	r0, #14
     fd2:	4b25      	ldr	r3, [pc, #148]	; (1068 <TC3_Handler+0xe4>)
     fd4:	4798      	blx	r3
		port_pin_set_output_level(LED_PWM_2_PIN,false);
     fd6:	2100      	movs	r1, #0
     fd8:	202b      	movs	r0, #43	; 0x2b
     fda:	4b23      	ldr	r3, [pc, #140]	; (1068 <TC3_Handler+0xe4>)
     fdc:	4798      	blx	r3
	}
	if (pwm_count >= PWM_FREQ)
     fde:	4b20      	ldr	r3, [pc, #128]	; (1060 <TC3_Handler+0xdc>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	2bf9      	cmp	r3, #249	; 0xf9
     fe4:	dd38      	ble.n	1058 <TC3_Handler+0xd4>
	{	
		if (fade_way)
     fe6:	4b21      	ldr	r3, [pc, #132]	; (106c <TC3_Handler+0xe8>)
     fe8:	781b      	ldrb	r3, [r3, #0]
     fea:	2b00      	cmp	r3, #0
     fec:	d01a      	beq.n	1024 <TC3_Handler+0xa0>
		{
			dutycycle += 1;
     fee:	4b1d      	ldr	r3, [pc, #116]	; (1064 <TC3_Handler+0xe0>)
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	1c5a      	adds	r2, r3, #1
     ff4:	4b1b      	ldr	r3, [pc, #108]	; (1064 <TC3_Handler+0xe0>)
     ff6:	601a      	str	r2, [r3, #0]
			if(dutycycle >= PWM_FREQ)
     ff8:	4b1a      	ldr	r3, [pc, #104]	; (1064 <TC3_Handler+0xe0>)
     ffa:	681b      	ldr	r3, [r3, #0]
     ffc:	2bf9      	cmp	r3, #249	; 0xf9
     ffe:	dd2b      	ble.n	1058 <TC3_Handler+0xd4>
			{
				dutycycle = PWM_FREQ;
    1000:	4b18      	ldr	r3, [pc, #96]	; (1064 <TC3_Handler+0xe0>)
    1002:	22fa      	movs	r2, #250	; 0xfa
    1004:	601a      	str	r2, [r3, #0]
				fade_way = !fade_way;
    1006:	4b19      	ldr	r3, [pc, #100]	; (106c <TC3_Handler+0xe8>)
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	1e5a      	subs	r2, r3, #1
    100c:	4193      	sbcs	r3, r2
    100e:	b2db      	uxtb	r3, r3
    1010:	2201      	movs	r2, #1
    1012:	4053      	eors	r3, r2
    1014:	b2db      	uxtb	r3, r3
    1016:	1c1a      	adds	r2, r3, #0
    1018:	2301      	movs	r3, #1
    101a:	4013      	ands	r3, r2
    101c:	b2da      	uxtb	r2, r3
    101e:	4b13      	ldr	r3, [pc, #76]	; (106c <TC3_Handler+0xe8>)
    1020:	701a      	strb	r2, [r3, #0]
			}
		}
		
	}

    1022:	e019      	b.n	1058 <TC3_Handler+0xd4>
			dutycycle -= 1;
    1024:	4b0f      	ldr	r3, [pc, #60]	; (1064 <TC3_Handler+0xe0>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	1e5a      	subs	r2, r3, #1
    102a:	4b0e      	ldr	r3, [pc, #56]	; (1064 <TC3_Handler+0xe0>)
    102c:	601a      	str	r2, [r3, #0]
			if(dutycycle <= PWM_FREQ/16)
    102e:	4b0d      	ldr	r3, [pc, #52]	; (1064 <TC3_Handler+0xe0>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	2b0f      	cmp	r3, #15
    1034:	dc10      	bgt.n	1058 <TC3_Handler+0xd4>
				dutycycle = PWM_FREQ/16;
    1036:	4b0b      	ldr	r3, [pc, #44]	; (1064 <TC3_Handler+0xe0>)
    1038:	220f      	movs	r2, #15
    103a:	601a      	str	r2, [r3, #0]
				fade_way = !fade_way;
    103c:	4b0b      	ldr	r3, [pc, #44]	; (106c <TC3_Handler+0xe8>)
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	1e5a      	subs	r2, r3, #1
    1042:	4193      	sbcs	r3, r2
    1044:	b2db      	uxtb	r3, r3
    1046:	2201      	movs	r2, #1
    1048:	4053      	eors	r3, r2
    104a:	b2db      	uxtb	r3, r3
    104c:	1c1a      	adds	r2, r3, #0
    104e:	2301      	movs	r3, #1
    1050:	4013      	ands	r3, r2
    1052:	b2da      	uxtb	r2, r3
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <TC3_Handler+0xe8>)
    1056:	701a      	strb	r2, [r3, #0]
    1058:	46c0      	nop			; (mov r8, r8)
    105a:	46bd      	mov	sp, r7
    105c:	bd80      	pop	{r7, pc}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	20000048 	.word	0x20000048
    1064:	20000004 	.word	0x20000004
    1068:	00000e55 	.word	0x00000e55
    106c:	20000008 	.word	0x20000008

00001070 <main>:
 */
#include <asf.h>
#include "ledpwm.h"

int main (void)
{
    1070:	b580      	push	{r7, lr}
    1072:	af00      	add	r7, sp, #0
	system_init();
    1074:	4b03      	ldr	r3, [pc, #12]	; (1084 <main+0x14>)
    1076:	4798      	blx	r3
	//configure_tc();
	//configure_tcc();
	led_pwm_init();
    1078:	4b03      	ldr	r3, [pc, #12]	; (1088 <main+0x18>)
    107a:	4798      	blx	r3
	init_TC3();
    107c:	4b03      	ldr	r3, [pc, #12]	; (108c <main+0x1c>)
    107e:	4798      	blx	r3
	


	while (1)
    1080:	e7fe      	b.n	1080 <main+0x10>
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	00000ab9 	.word	0x00000ab9
    1088:	00000ea9 	.word	0x00000ea9
    108c:	00000f0d 	.word	0x00000f0d

00001090 <__libc_init_array>:
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	2600      	movs	r6, #0
    1094:	4d0c      	ldr	r5, [pc, #48]	; (10c8 <__libc_init_array+0x38>)
    1096:	4c0d      	ldr	r4, [pc, #52]	; (10cc <__libc_init_array+0x3c>)
    1098:	1b64      	subs	r4, r4, r5
    109a:	10a4      	asrs	r4, r4, #2
    109c:	42a6      	cmp	r6, r4
    109e:	d109      	bne.n	10b4 <__libc_init_array+0x24>
    10a0:	2600      	movs	r6, #0
    10a2:	f000 f843 	bl	112c <_init>
    10a6:	4d0a      	ldr	r5, [pc, #40]	; (10d0 <__libc_init_array+0x40>)
    10a8:	4c0a      	ldr	r4, [pc, #40]	; (10d4 <__libc_init_array+0x44>)
    10aa:	1b64      	subs	r4, r4, r5
    10ac:	10a4      	asrs	r4, r4, #2
    10ae:	42a6      	cmp	r6, r4
    10b0:	d105      	bne.n	10be <__libc_init_array+0x2e>
    10b2:	bd70      	pop	{r4, r5, r6, pc}
    10b4:	00b3      	lsls	r3, r6, #2
    10b6:	58eb      	ldr	r3, [r5, r3]
    10b8:	4798      	blx	r3
    10ba:	3601      	adds	r6, #1
    10bc:	e7ee      	b.n	109c <__libc_init_array+0xc>
    10be:	00b3      	lsls	r3, r6, #2
    10c0:	58eb      	ldr	r3, [r5, r3]
    10c2:	4798      	blx	r3
    10c4:	3601      	adds	r6, #1
    10c6:	e7f2      	b.n	10ae <__libc_init_array+0x1e>
    10c8:	00001138 	.word	0x00001138
    10cc:	00001138 	.word	0x00001138
    10d0:	00001138 	.word	0x00001138
    10d4:	0000113c 	.word	0x0000113c
    10d8:	00000448 	.word	0x00000448
    10dc:	00000498 	.word	0x00000498
    10e0:	00000498 	.word	0x00000498
    10e4:	00000494 	.word	0x00000494
    10e8:	0000043a 	.word	0x0000043a
    10ec:	0000045a 	.word	0x0000045a
    10f0:	0000042a 	.word	0x0000042a
    10f4:	0000046c 	.word	0x0000046c
    10f8:	0000047e 	.word	0x0000047e

000010fc <_tcc_intflag>:
    10fc:	00000001 00000002 00000004 00000008     ................
    110c:	00001000 00002000 00004000 00008000     ..... ...@......
    111c:	00010000 00020000 00040000 00080000     ................

0000112c <_init>:
    112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1132:	bc08      	pop	{r3}
    1134:	469e      	mov	lr, r3
    1136:	4770      	bx	lr

00001138 <__init_array_start>:
    1138:	000000dd 	.word	0x000000dd

0000113c <_fini>:
    113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1142:	bc08      	pop	{r3}
    1144:	469e      	mov	lr, r3
    1146:	4770      	bx	lr

00001148 <__fini_array_start>:
    1148:	000000b5 	.word	0x000000b5
